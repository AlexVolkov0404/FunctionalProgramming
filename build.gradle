plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "org.sonarqube" version "5.1.0.4882"
    id 'com.bmuschko.docker-remote-api' version '7.2.0'
}

sonar {
    properties {
        property("sonar.projectKey", "AlexVolkov0404_functionalprogramming_d87f11fc-7033-48dc-8a49-56ece35cb7aa")
        property("sonar.organization", "AlexVolkov0404")
    }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.google.code.gson:gson:2.11.0'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
/*

task createDockerFile(type: Dockerfile) {
    from 'amazoncorretto:17'
    copyFile jar.archiveFileName.get(), '/app/test_service.jar'
    entryPoint 'java'
    defaultCommand '-jar', '/app/test_service.jar'
    exposePort 8080
}

task syncJar(type: Copy) {
    dependsOn assemble
    from jar.destinationDirectory
    into "$buildDir/docker"
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerFile, syncJar
    inputDir = createDockerFile.getDestDir()
    buildArgs = ( [ "JAR_FILE":"build/libs/\\*.jar" ] )
    images = ["docker/fp-application-image:1.0"]
}
*/

tasks.named("bootBuildImage") {
    imageName = "docker/fp-application-image:1.0"
    environment["BP_JVM_VERSION"] = "17"
}

def ourContainerName = "fp-app"

task stopContainer(type: DockerStopContainer) {
    targetContainerId("$ourContainerName")
    onError { exception -> handleError(exception) }
}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    targetContainerId("$ourContainerName")
    onError { exception -> handleError(exception) }
}

task createContainer(type: DockerCreateContainer) {
    dependsOn bootBuildImage, removeContainer
    targetImageId bootBuildImage.getImageName()
    containerName = "$ourContainerName"
    hostConfig.portBindings = ['8080:8080']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId("$ourContainerName")
}

private void handleError(Throwable exc) {
    if (exc.message != null &&
            !exc.message.contains('NotModifiedException') &&
            !exc.message.contains('No such container')) {
        throw new RuntimeException(exc)
    }
}